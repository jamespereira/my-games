{"version":3,"sources":["Base.js","Game.js","GameShelf.js","ListGames.js","GamesAPI.js","AddGames.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","databaseURL","db","database","base","Rebase","createClass","Game","props","score","game","shelf","name","released","metacritic","background_image","className","style","width","height","backgroundPosition","backgroundSize","backgroundImage","background","value","onChange","event","handleSelectChange","disabled","Date","toLocaleString","month","year","day","GameShelf","updatedTitle","title","games","map","key","id","ListGames","filter","to","Component","api","headers","AddGames","state","term","searchedGames","allGames","handleInputChange","setState","searchGame","query","console","log","filteredGames","toLowerCase","includes","page","fetch","then","response","json","newGames","results","shelfGames","shelfGame","splice","indexOf","this","type","placeholder","target","App","handleShelfUpdate","ref","Base","syncState","context","asArray","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.25d5847b.chunk.js","sourcesContent":["import Rebase from 're-base';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst app = firebase.initializeApp({\n      apiKey: \"AIzaSyBL3uNl_7pgtpy08gwTOZeIrRkCkDHlI3Q\",\n    authDomain: \"my-games-36d1c.firebaseapp.com\",\n    databaseURL: \"https://my-games-36d1c.firebaseio.com\",\n});\n\nvar db = firebase.database(app);\nvar base = Rebase.createClass(db);\n\nexport default base;","import React from 'react';\n\nconst Game = (props) => {\n    const { shelf, name, released, metacritic, background_image } = props.game ? props.game : '';\n\n    const ratingColour = (score) => {\n        let hexRating = '';\n\n        if (score >= 90) hexRating = '#6c3';\n        else if (score >= 50 && score < 90) hexRating = '#fc3';\n        else if(score < 50 ) hexRating = '#f00';\n        else hexRating = 'rgba(0,0,0,0)'\n        \n        return hexRating;\n\n    }\n\n    const convertDate = (date) => {\n        return new Date(date).toLocaleString('default', { month: 'long', year : 'numeric', day : 'numeric'});\n    }\n\n    return (\n        <div className=\"game\">\n            <div className=\"game-top\">\n                <div className=\"game-cover\" style={{ width: 128, height: 193, backgroundPosition: 'center', backgroundSize: 'cover', backgroundImage: `url(${background_image})` }}>\n                    <div className=\"game-rating\" style={{ background: ratingColour(metacritic) }}>{metacritic}</div>\n                </div>\n                <div className=\"game-shelf-changer\">\n                    <select value={shelf} onChange={(event) => props.handleSelectChange(event, props.game)}>\n                        <option value=\"move\" disabled>Move to...</option>\n                        <option value=\"currentlyPlaying\">Currently Playing</option>\n                        <option value=\"wantToPlay\">Want to Play</option>\n                        <option value=\"completed\">Completed</option>\n                        <option value=\"none\">None</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"game-title\">{name}</div>\n            <div className=\"game-released\">{convertDate(released)}</div>\n        </div>\n    );\n};\n\nexport default Game;","import React from 'react';\nimport Game from './Game';\n\nconst GameShelf = (props) => {\n\n    let updatedTitle = ''\n    switch (props.title) {\n        case 'currentlyPlaying': updatedTitle = 'Currently Playing';\n            break;\n        case 'wantToPlay': updatedTitle = 'Want To Play';\n            break;\n        case 'completed': updatedTitle = 'Completed';\n            break;\n        default: updatedTitle = '';\n    }\n\n    return (\n        <div className=\"gameshelf\">\n            <h2 className=\"gameshelf-title\">{updatedTitle}</h2>\n            <div className=\"gameshelf-games\">\n            <ol className=\"games-grid\">\n                {props.games.map(game => (\n                    <li key={game.id}>\n                        <Game game={game} handleSelectChange={props.handleSelectChange}/>\n                    </li>\n                ))}\n            </ol>\n            </div>\n        </div>\n    );\n};\n\nexport default GameShelf;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport GameShelf from './GameShelf';\n\nclass ListGames extends Component {\n    render() {\n\n        const shelves = [\n            'currentlyPlaying',\n            'wantToPlay',\n            'completed'\n        ]\n\n        return (\n            <div className=\"list-games\">\n                {/* <div className=\"list-games-title\">\n                    <h1>My gameshelf</h1>\n                </div> */}\n                <div className=\"list-games-content\">\n                    {shelves.map(shelf => (\n                        <GameShelf key={shelf} title={shelf} games={this.props.games.filter(game => game.shelf === shelf)} handleSelectChange={this.props.handleSelectChange}/>\n                    ))}\n                </div>\n                <Link to=\"/search\" className=\"open-search\">\n                    <button>Add a game</button>\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default ListGames;","const api = \"https://rawg-video-games-database.p.rapidapi.com\"\n\nconst headers = {\n    \"x-rapidapi-host\": \"rawg-video-games-database.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"ee5f129151msh9a2e3747969076cp17b077jsn8260f27a0d30\"\n}\n\nexport const search = (query) =>\n    fetch(`${api}/games/${query}`, { headers })\n        .then(response => response.json())\n\n\n\nexport const getAll = () =>\n    fetch(`${api}/games`, { headers })\n        .then(response => response.json())\n\nexport const getPage = (page) =>\n    fetch(`${api}/games?page=${page}`, { headers })\n        .then(response => response.json())\n\n\n\n\n\n","import React, { Component } from 'react';\nimport * as GamesAPI from './GamesAPI';\nimport { Link } from 'react-router-dom';\nimport GameShelf from './GameShelf';\n\n\nclass AddGames extends Component {\n\n    state = {\n        term: '',\n        searchedGames: [],\n        allGames: []\n    }\n\n    componentDidMount() {\n        GamesAPI.getPage(1).then(response => {\n            let games = response.results;\n            let newGames = [];\n\n            for (let shelfGame of this.props.shelfGames) {\n                games.map(game => {\n                    if (game.name === shelfGame.name) {\n                        games.splice(games.indexOf(game), 1);\n                    }\n                })\n            }\n            games.map(game => game.shelf = 'none')\n            newGames = [...this.props.shelfGames, ...games];\n\n            this.setState({ allGames: newGames })\n        })\n    }\n\n    handleInputChange = (term) => {\n        this.setState({ term: term })\n        this.searchGame(term);\n    }\n\n\n    searchGame = (query) => {\n        if (query) {\n            console.log(query)\n            let filteredGames = this.state.allGames.filter(game => (\n                game.name.toLowerCase().includes(query.toLowerCase())\n            ));\n            this.setState({ searchedGames: filteredGames })\n        }\n    }\n\n    render() {\n        const { term, allGames, searchedGames } = this.state;\n\n        return (\n            <div className=\"search-games\">\n                <div className=\"search-games-bar\">\n                    <Link className=\"close-search\" to=\"/my-games/\">Close</Link>\n                    <div className=\"search-games-input-wrapper\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search by game name\"\n                            value={term}\n                            onChange={(event) => this.handleInputChange(event.target.value)}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"search-games-results\">\n                    {term && (\n                        <ol className=\"games-grid\">\n                            <GameShelf title={\"search\"} games={searchedGames} handleSelectChange={this.props.handleSelectChange} />\n                        </ol>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AddGames;","import React, { Component } from 'react';\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport Base from './Base';\n\nimport ListGames from './ListGames';\nimport AddGames from './AddGames';\n\nclass App extends Component {\n\n  state = {\n    games: []\n  }\n\n  componentDidMount() {\n    this.ref = Base.syncState('games', {\n      context: this,\n      state: 'games',\n      asArray: true\n    });\n  }\n\nhandleShelfUpdate = (event, game) => {\n  const shelf = event.target.value;\n  let newGames = [];\n\n  game.shelf === 'none' ? newGames = [...this.state.games, game] : newGames = [...this.state.games] ;\n  game.shelf = shelf;\n\n  this.setState({ games : newGames })\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Route exact path=\"/my-games/\" render={() => (\n        <ListGames games={this.state.games} handleSelectChange={this.handleShelfUpdate} />\n      )} />\n      <Route path=\"/search\" render={() => (\n        <AddGames shelfGames={this.state.games} handleSelectChange={this.handleShelfUpdate} />\n      )} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}